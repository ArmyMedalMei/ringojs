Index: src/org/mozilla/javascript/Context.java
===================================================================
RCS file: /cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/Context.java,v
retrieving revision 1.282
diff -u -r1.282 Context.java
--- src/org/mozilla/javascript/Context.java	23 Dec 2009 21:47:43 -0000	1.282
+++ src/org/mozilla/javascript/Context.java	24 Mar 2010 08:08:18 -0000
@@ -50,6 +50,8 @@
 import java.io.Writer;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.Map;
 import java.util.HashMap;
 import java.util.Set;
@@ -2532,11 +2534,18 @@
     RegExpProxy getRegExpProxy()
     {
         if (regExpProxy == null) {
-            Class<?> cl = Kit.classOrNull(
-                          "org.mozilla.javascript.regexp.RegExpImpl");
-            if (cl != null) {
-                regExpProxy = (RegExpProxy)Kit.newInstanceOrNull(cl);
-            }
+            regExpProxy = AccessController.doPrivileged(
+                    new PrivilegedAction<RegExpProxy>() {
+                        public RegExpProxy run() {
+                            Class<?> cl = Kit.classOrNull(
+                                          "org.mozilla.javascript.regexp.RegExpImpl");
+                            if (cl != null) {
+                                return (RegExpProxy)Kit.newInstanceOrNull(cl);
+                            }
+                            return null;
+                        }
+                    }
+            );
         }
         return regExpProxy;
     }
Index: src/org/mozilla/javascript/JavaAdapter.java
===================================================================
RCS file: /cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/JavaAdapter.java,v
retrieving revision 1.119
diff -u -r1.119 JavaAdapter.java
--- src/org/mozilla/javascript/JavaAdapter.java	22 Mar 2010 18:01:58 -0000	1.119
+++ src/org/mozilla/javascript/JavaAdapter.java	24 Mar 2010 08:08:22 -0000
@@ -130,6 +130,10 @@
 
     public static Object convertResult(Object result, Class<?> c)
     {
+        return convertResult(result, c, true);
+    }
+
+    public static Object convertResult(Object result, Class<?> c, boolean unwrap) {
         if (result == Undefined.instance &&
             (c != ScriptRuntime.ObjectClass &&
              c != ScriptRuntime.StringClass))
@@ -137,6 +141,14 @@
             // Avoid an error for an undefined value; return null instead.
             return null;
         }
+        if (!unwrap) {
+            // Scriptable.NOT_FOUND requires special handling
+            if (result instanceof Wrapper &&
+                    ((Wrapper)result).unwrap() == Scriptable.NOT_FOUND) {
+                return Scriptable.NOT_FOUND;
+            }
+            return result;
+        }
         return Context.jsToJava(result, c);
     }
 
@@ -352,9 +364,13 @@
                      (short) (ClassFileWriter.ACC_PUBLIC |
                               ClassFileWriter.ACC_FINAL));
         int interfacesCount = interfaces == null ? 0 : interfaces.length;
+        boolean isScriptable = Scriptable.class.isAssignableFrom(superClass);
         for (int i=0; i < interfacesCount; i++) {
-            if (interfaces[i] != null)
+            if (interfaces[i] != null) {
                 cfw.addInterface(interfaces[i].getName());
+                isScriptable = isScriptable
+                        || Scriptable.class.isAssignableFrom(interfaces[i]);
+            }
         }
 
         String superName = superClass.getName().replace('.', '/');
@@ -394,7 +410,7 @@
                 String methodKey = methodName + methodSignature;
                 if (! generatedOverrides.has(methodKey)) {
                     generateMethod(cfw, adapterName, methodName,
-                                   argTypes, method.getReturnType());
+                                   argTypes, method.getReturnType(), !isScriptable);
                     generatedOverrides.put(methodKey, 0);
                     generatedMethods.put(methodName, 0);
                 }
@@ -422,7 +438,7 @@
                 String methodKey = methodName + methodSignature;
                 if (! generatedOverrides.has(methodKey)) {
                     generateMethod(cfw, adapterName, methodName,
-                                   argTypes, method.getReturnType());
+                                   argTypes, method.getReturnType(), !isScriptable);
                     generatedOverrides.put(methodKey, 0);
                     generatedMethods.put(methodName, 0);
                     
@@ -449,7 +465,7 @@
             for (int k=0; k < length; k++)
                 parms[k] = ScriptRuntime.ObjectClass;
             generateMethod(cfw, adapterName, functionName, parms,
-                           ScriptRuntime.ObjectClass);
+                           ScriptRuntime.ObjectClass, !isScriptable);
         }
         return cfw.toByteArray();
     }
@@ -820,7 +836,7 @@
      * Generates the appropriate RETURN bytecode.
      */
     static void generateReturnResult(ClassFileWriter cfw, Class<?> retType,
-                                     boolean callConvertResult)
+                                     boolean convertResult)
     {
         // wrap boolean values with java.lang.Boolean, convert all other
         // primitive values to java.lang.Double.
@@ -877,20 +893,19 @@
 
         } else {
             String retTypeStr = retType.getName();
-            if (callConvertResult) {
-                cfw.addLoadConstant(retTypeStr);
-                cfw.addInvoke(ByteCode.INVOKESTATIC,
-                              "java/lang/Class",
-                              "forName",
-                              "(Ljava/lang/String;)Ljava/lang/Class;");
-
-                cfw.addInvoke(ByteCode.INVOKESTATIC,
-                              "org/mozilla/javascript/JavaAdapter",
-                              "convertResult",
-                              "(Ljava/lang/Object;"
-                              +"Ljava/lang/Class;"
-                              +")Ljava/lang/Object;");
-            }
+            cfw.addLoadConstant(retTypeStr);
+            cfw.addInvoke(ByteCode.INVOKESTATIC,
+                          "java/lang/Class",
+                          "forName",
+                          "(Ljava/lang/String;)Ljava/lang/Class;");
+            cfw.addLoadConstant(convertResult ? 1 : 0);
+            cfw.addInvoke(ByteCode.INVOKESTATIC,
+                          "org/mozilla/javascript/JavaAdapter",
+                          "convertResult",
+                          "(Ljava/lang/Object;"
+                          +"Ljava/lang/Class;"
+                          +"Z"
+                          +")Ljava/lang/Object;");
             // Now cast to return type
             cfw.add(ByteCode.CHECKCAST, retTypeStr);
             cfw.add(ByteCode.ARETURN);
@@ -899,7 +914,7 @@
 
     private static void generateMethod(ClassFileWriter cfw, String genName,
                                        String methodName, Class<?>[] parms,
-                                       Class<?> returnType)
+                                       Class<?> returnType, boolean convertResult)
     {
         StringBuffer sb = new StringBuffer();
         int paramsEnd = appendMethodSignature(parms, returnType, sb);
@@ -962,7 +977,7 @@
                       +"J"
                       +")Ljava/lang/Object;");
 
-        generateReturnResult(cfw, returnType, true);
+        generateReturnResult(cfw, returnType, convertResult);
 
         cfw.stopMethod((short)paramsEnd);
     }
Index: src/org/mozilla/javascript/Synchronizer.java
===================================================================
RCS file: /cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/Synchronizer.java,v
retrieving revision 1.9
diff -u -r1.9 Synchronizer.java
--- src/org/mozilla/javascript/Synchronizer.java	25 Mar 2008 14:32:27 -0000	1.9
+++ src/org/mozilla/javascript/Synchronizer.java	24 Mar 2010 08:08:25 -0000
@@ -59,6 +59,8 @@
 
 public class Synchronizer extends Delegator {
 
+    private Object syncObject;
+
     /**
      * Create a new synchronized function from an existing one.
      *
@@ -69,13 +71,26 @@
     }
 
     /**
+     * Create a new synchronized function from an existing one using
+     * an explicit object as synchronization object.
+     *
+     * @param obj the existing function
+     * @param syncObject the object to synchronized on
+     */
+    public Synchronizer(Scriptable obj, Object syncObject) {
+        super(obj);
+        this.syncObject = syncObject;
+    }
+
+    /**
      * @see org.mozilla.javascript.Function#call
      */
     @Override
     public Object call(Context cx, Scriptable scope, Scriptable thisObj,
                        Object[] args)
     {
-        synchronized(thisObj instanceof Wrapper ? ((Wrapper)thisObj).unwrap() : thisObj) {
+        Object sync = syncObject != null ? syncObject : thisObj;
+        synchronized(sync instanceof Wrapper ? ((Wrapper)sync).unwrap() : sync) {
             return ((Function)obj).call(cx,scope,thisObj,args);
         }
     }
Index: toolsrc/org/mozilla/javascript/tools/resources/Messages.properties
===================================================================
RCS file: /cvsroot/mozilla/js/rhino/toolsrc/org/mozilla/javascript/tools/resources/Messages.properties,v
retrieving revision 1.37
diff -u -r1.37 Messages.properties
--- toolsrc/org/mozilla/javascript/tools/resources/Messages.properties	18 Oct 2008 18:57:27 -0000	1.37
+++ toolsrc/org/mozilla/javascript/tools/resources/Messages.properties	24 Mar 2010 08:08:26 -0000
@@ -91,8 +91,9 @@
     version([number])      Get or set the JavaScript version number. \n\
     gc()                   Runs the garbage collector.\n\
     spawn(arg)             Evaluate function or script name on a new thread \n\
-    sync(function)         Creates a synchronized version of the function, \n\
-    \                       where the synchronization object is "this" \n\
+    sync(function [,obj])  Creates a synchronized version of the function, \n\
+    \                       where the synchronization object is the second \n\
+    \                       argument or "this" \n\
     readFile(fileName [, encoding])\n\
     \                       Returns the content of the file as a string. \n\
     \                       Encoding of the string can be optionally specified. \n\
Index: toolsrc/org/mozilla/javascript/tools/shell/Global.java
===================================================================
RCS file: /cvsroot/mozilla/js/rhino/toolsrc/org/mozilla/javascript/tools/shell/Global.java,v
retrieving revision 1.58
diff -u -r1.58 Global.java
--- toolsrc/org/mozilla/javascript/tools/shell/Global.java	14 Sep 2009 22:20:34 -0000	1.58
+++ toolsrc/org/mozilla/javascript/tools/shell/Global.java	24 Mar 2010 08:08:27 -0000
@@ -555,7 +555,8 @@
     /**
      * The sync function creates a synchronized function (in the sense
      * of a Java synchronized method) from an existing function. The
-     * new function synchronizes on the <code>this</code> object of
+     * new function synchronizes on the the second argument if it is
+     * defined, or otherwise the <code>this</code> object of
      * its invocation.
      * js> var o = { f : sync(function(x) {
      *       print("entry");
@@ -575,8 +576,12 @@
     public static Object sync(Context cx, Scriptable thisObj, Object[] args,
                               Function funObj)
     {
-        if (args.length == 1 && args[0] instanceof Function) {
-            return new Synchronizer((Function)args[0]);
+        if (args.length >= 1 && args.length <= 2 && args[0] instanceof Function) {
+            Object syncObject = null;
+            if (args.length == 2 && args[1] != Undefined.instance) {
+                syncObject = args[1];
+            }
+            return new Synchronizer((Function)args[0], syncObject);
         }
         else {
             throw reportRuntimeError("msg.sync.args");
